NJUAN

Requisitos:
Simple versión de "nmap <ip>"

-Escanea los primeros 1000 puertos de una ip dada
-Muestra: versión, ip, si el host esta activo, info de los puertos y resumen del escaneo.

-Usar c/C++
-Funcionar en KaliLinux

Pasos:
Check:
-Comprobar como se crea un proyecto de C++ para KaliLinux
-Preparar el entorno de desarrollo
-Ejecutar un hola mundo

Desarrollo:
25/04
A socket is one endpoint of a two-way communication link between two programs running on the network.
A socket is bound to a port number so that the TCP layer can identify the application that data is destined to be sent to.
An endpoint is a combination of an IP address and a port number.
https://www.youtube.com/watch?v=TE1XQ8U_JNA

27/04
He conseguido programar un simple socket en C (gracias a la guía de https://www.geeksforgeeks.org/socket-programming-cc/).
Las conexiones a los primeros 1000 puertos funcionan.

28/04 - Entender socket y aislar su creación
socket() -> http://man7.org/linux/man-pages/man2/socket.2.html

--sock = socket(AF_INET, SOCK_STREAM, 0)
Socket Creation: AF_INET=IPV4, SOCK_STREAM=safe two way comunication, 
You can use Internet Protocol: 6=Transmission Control Protocol(TCP) but with 0 we ensure to use the protocol that matches
the SOCK_STREAM specified.

29/04 - Escaneo de todos los puertos
No acabo de entender porque no funciona el escaneo completo.
Puedes ser porque se ejecuta muy rápido o porque hay un error en mi código. Seguiremos en un par de semanas

21/05 - Solución parcial del escaneo de puertos
He conseguido realizar el escaneo de todos los puertos, la clave estaba en cerrar el socket y crear otro. El problema ahora está
en que aparecen puertos random como abiertos, no parece haber ningún patrón y he comprobado a través de nmap que los puertos que aparecen están
cerrados.
También he añadido el input de usuario (que ya iba haciendo falta) y un poco de limpieza de código (que también iba haciendo falta).

04/06 - Solución del escaneo de puertos
Habia que utilizar un getaddrinfo() para precisar la información del servicio al que se intenta conectar.
Para proximas actualizaciones habría que buscar la forma de usar conexiones UDP también.

05/06 - Tercera solucion del escaneo
Lo primero ha sido limpiar los breaks y continues que ensucian el flujo del programa.
Ya he entendido porque usa el for, es porque en un puerto UDP puede haber varios servicios.
Cambios en los argumentos para no ocupar tanta memoria.
Todo el mundo dice que es conveniente cerrar las sockets para no crear demasiado file descriptors, pero el scanner falla en la deteccion cuando 
aplicamos esta mejor practica, de momento se queda así que es como funciona correctamente.
Las ejecuciones difieren entre el vscode y la terminal. ¯\_( ͡° ͜ʖ ͡°)_/¯

